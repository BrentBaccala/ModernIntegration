Comparison of open source computer algebra systems

Axiom
  doesn't use readline
  builtin hyperdoc is way behind HTML
  couldn't figure how to parse:
    integrand := x*((x^2*exp(2*x^2)-log(x+1)^2)^2) / ((x+1)*(log(x+1)^2 - x^2*exp(2*x^2))^2)


Maxima
  uses LISP-style function definition syntax

  MAXIMA function tex_displ(MLABEL %O14 EXPR)
    - fetch tex-environment - either "" (strings) OR tex-environment property on car OR *tex-environment-default*
    - print tex1(LABEL %O14) (minus 14 chars because of trailing \mathbb{false})
    - then print env around tex1(EXPR)

  MAXIMA function print(EXPR) calls displa for output


Sage
  struggling to do polynomial long division
    calls Maxima or Singular to do this
  implements algebraic closure of Q (QQbar)

  + fix latex printing on power series
  - subs should raise NotImplementedError if element not callable
  - subs should work recursively on complicated rings
  - option to specify how QQbar elements print
  - can't type convert between two slightly different NumberRings:
      Number Field in a with defining polynomial a^7 - 18
      Number Field in a with defining polynomial y^7 - 18
  - add map_coefficients method to Laurent series (Taylor, too?)


Macaulay 2
  doesn't implemente fraction fields over complicated (non-Z, non-Q) constant fields

Singular
  can't compute Riemann-Roch spaces in characteristic p
  can compute Hamber-Noether expansions (can this be converted to a Puiseux expansion?)

CoCoA
  C++ library


Macaulay 2 - Riemann-Roch space calculator (Noether-Brill algorithm ??)

completeLinearSystemOnNodalPlaneCurve=method()
completeLinearSystemOnNodalPlaneCurve(Ideal,List):=(J,D)->(
     singJ:=saturate(ideal jacobian J+J);
        -- adjoint ideal
     H:=ideal (mingens ideal(gens intersect(singJ,D_0)%J))_(0,0);
        -- a curve passing through singJ and D_0
     E0:=((J+H):D_0):(singJ^2); -- residual divisor
     if not(degree J *degree H - degree D_0 -2*degree singJ==degree E0)
        then error"residual divisor of has wrong degree";
     L1:=mingens ideal (gens truncate(degree H, intersect(E0,D_1,singJ)))%J;
     h0D:=(tally degrees source L1)_{degree H}; -- h^0 O(D)
     L:=L1_{0..h0D-1}; -- matrix of homogeneous forms, L/H =L(D) subset K(C)
     (L,(gens H)_(0,0)))

http://www2.macaulay2.com/Macaulay2/doc/Macaulay2-1.11/share/doc/Macaulay2/Macaulay2Doc/html/___Tutorial_co_sp__Divisors.html





a=QQ['a'].0
aRing = NumberField(a^2 + 1, 'a')

b=QQ['b'].0
bRing = NumberField(b^2 + 1, 'a')

aRing is bRing

aa=aRing.0
bb=bRing.0

bRing(aa)

def ringmap(x):
    # First map x from the polynomial ring down to its coefficent ring (a NumberField)
    x = x.parent()(x)
    # Then convert it to a polynomial and map to into numfield
    return x.polynomial()(numfield.gens()[0])


HOW TO CREATE A MAP BETWEEN TWO POLYNOMIAL RINGS INDUCED BY A MAP ON THEIR COEFFICIENTS

R.<a> = QQ[]
aRing = NumberField(a^2 + 1, 'a')
R.<b> = QQ[]
bRing = NumberField(b^2 + 1, 'a')

aRing2 = aRing['x']
bRing2 = bRing['x']

h = aRing.hom(bRing.gens())

h2 = aRing2.hom(h, bRing2)

DOESN'T WORK FOR LAURENT SERIES



BUG REPORT TO SHOW HOW SINGULAR RETURNS RESULTS IN WRONG FIELD

R.<b> = QQ[]
S = NumberField(b^7 - 18, 'a')

R.<x,y> = S[]
f = x + y

singular.lib('hnoether.lib')
hne = f._singular_().hnexpansion().sage()

hne[0][0].base_ring() is f.parent()



SAGE - SINGULAR IDEALS

rings/polynomial/multi_polynomial_ideal.py
  lines 558-592
  create Singular ideal
  lift generators into parent ring before str-ifying them for Singular

interfaces/singular.py
  lines 1957-1959
  converts Singular ideal to sage ideal

   1958             R = R or self.sage_global_ring()
   1959             return R.ideal([p.sage_poly(R) for p in self])

  if R is a quotient ring,
    p.sage_poly(R) can't be lifted into the base ring

  sage_poly:

   1779             p = MPolynomial_polydict(R,PolyDict(sage_repr,force_int_exponents=False,force_etuples=False))
   1780             if isinstance(R, MPolynomialRing_polydict):
   1781                 return p
   1782             else:
   1783                 return QuotientRingElement(R,p,reduce=False)

  what we get back is a QuotientRingElement containing an MPolynomial_polydict

  self.sage_global_ring() will return a quotient ring different from the one we started with
    its generators will be named 'x', 'y', 'z', instead of 'xbar', 'ybar', 'zbar'

  subs doesn't work because _call_ isn't defined on QuotientRingElement's
    (subs in RingElement returns self if _call_ isn't defined)


Sage univariate polynomial discriminant:

rings/polynomial/polynomial_modn_dense_ntl.pyx:    def discriminant(self):

rings/polynomial/polynomial_integer_dense_flint.pyx:    def discriminant(self, proof=True):
        r"""
        Return the discriminant of self, which is by definition

        .. MATH::

            (-1)^{m(m-1)/2} \mathop{\mathrm{resultant}}(a, a')/\mathop{\mathrm{lc}}(a),

        temp = ZZX_discriminant(&ntl_poly, proof)
rings/polynomial/polynomial_integer_dense_ntl.pyx:    def discriminant(self, proof=True):
        cdef ZZ_c* temp = ZZX_discriminant(&self.__poly, proof)

rings/polynomial/polynomial_quotient_ring.py:    def discriminant(self, v=None):
        Return the discriminant of this ring over the base ring. This is by
        definition the discriminant of the polynomial that we quotiented
        out by.
        return self.modulus().discriminant()

rings/polynomial/polynomial_element.pyx:    def discriminant(self):
   class Polynomial(CommutativeAlgebraElement)

Sage multivariate polynomial discriminant:

   cdef class MPolynomial_libsingular(MPolynomial):

rings/polynomial/multi_polynomial_libsingular.pyx:    def discriminant(self,variable):
        Returns the discriminant of self with respect to the given variable.



RIEMANN-ROCH BASIS

Singular: three methods
  brnoeth.lib (D.10.1) - ground field must be finite
     call NSplaces to get a list of non-singular places
     pass in a intvec to specify the order of the divisor at each place
  brillnoether.lib (D.15.2) - ground field must be Q
  hess.lib (D.15.19) - ground field must be Q
     pass in two fractional ideals - one for finite places, one for infinite places

Macaulay 2
  completeLinearSystemOnNodalPlaneCurve
     I guess this only works on a nodal curve?
     input specified as a pair of ideals of coordinate ring (Weil divisor)

KASH - finite fields, QQ, number fields

Sage
  not implemented at all in standard distribution
  implemented for finite fields in klee's Trac #22982
  via Kash for QQ and number fields (my code)

Note for a native Sage implementation of function fields over QQ
  when initializing a maximal order, we need a monic integral model
    of the function field, either because the function field is
    already integral, or we create a model, call it's _maximal_order_basis()
    method, then map those basis elements back
  need FunctionField_integral in addition to (or instead of) FunctionField_global_integral
    computation of maximal order init routine uses a modified singular routine to compute normalization
    I think the modification is because it's hard to get singular results back to Sage
      when they're attached to a given ring; it's easiest to just write a new singular
      function that returns the results the way Sage likes them


HOW SAGE INITIALIZES atexit CALLBACKS

SageCustomizations in sage.repl.ipython_extensions
   __init__ calls self.set_quit_hook()
      which defines a quit function with atexit that calls sage.all.quit_sage()
      which calls expect_quitall() in sage.interfaces.quit

(Pdb) where
  /home/baccala/src/sage/src/bin/sage-ipython(15)<module>()
-> app.initialize()
  <decorator-gen-110>(2)initialize()
  /home/baccala/src/sage/local/lib/python2.7/site-packages/traitlets/config/application.py(87)catch_config_error()
-> return method(app, *args, **kwargs)
  /home/baccala/src/sage/local/lib/python2.7/site-packages/IPython/terminal/ipapp.py(316)initialize()
-> self.init_shell()
  /home/baccala/src/sage/local/lib/python2.7/site-packages/sage/repl/interpreter.py(762)init_shell()
-> self.shell.extension_manager.load_extension(SAGE_EXTENSION)
  /home/baccala/src/sage/local/lib/python2.7/site-packages/IPython/core/extensions.py(85)load_extension()
-> if self._call_load_ipython_extension(mod):
  /home/baccala/src/sage/local/lib/python2.7/site-packages/IPython/core/extensions.py(132)_call_load_ipython_extension()
-> mod.load_ipython_extension(self.shell)
  /home/baccala/src/sage/local/lib/python2.7/site-packages/sage/__init__.py(11)load_ipython_extension()
-> sage.repl.ipython_extension.load_ipython_extension(*args)
  /home/baccala/src/sage/local/lib/python2.7/site-packages/sage/repl/ipython_extension.py(564)wrapper()
-> result = func(*args, **kwargs)
  /home/baccala/src/sage/local/lib/python2.7/site-packages/sage/repl/ipython_extension.py(577)load_ipython_extension()
-> SageCustomizations(shell=ip)
> /home/baccala/src/sage/local/lib/python2.7/site-packages/sage/repl/ipython_extension.py(426)__init__()
-> self.auto_magics = SageMagics(shell)
(Pdb)



A very slow Sage calculation that arose from the y^3 + x^3*y + x example,
when I tried to normalize the series at (g, -3/(2*g^2)).

R.<x> = QQbar[]
b = (x^28 + 104976).roots()[18][0]
a = (x^2 + 7/11664*b^24).roots()[1][0]
a.exactify()


This tests a bug fixed in Trac #26593:

g = QQbar(-27/4)^(1/7)
(nf, elems, mor) = number_field_elements_from_algebraics([sqrt(2), sqrt(-1), g])
nf3.<n> = NumberField(nf.polynomial(), embedding=mor(nf.0))
QQbar(-1/108*n^12) == -g

This doesn't work (should it)?

R.<x,y,a> = QQ[];
I = ideal(4*a^7+27)
Q = R.quo(I)
f = y^3 + x^3*y + x
puiseux(Q(f), a, 3/a^2, 10)

\begin{sageblock}
R1.<g> = QQ[]
S.<g> = NumberField(4*g^7+27)
R.<x,y> = S[]

f = y^3 + x^3*y + x
puiseux(f, g, -3/(2*g^2), 3)
puiseux(f, g, 3/g^2, 2)

# Why doesn't this work?
#
# try:
#     puiseux(f, g, 0, 1)
#     raise AssertionError()
# except ValueError:
#     pass
\end{sageblock}



This is one of the test cases from kash:

sage: K.<x> = FunctionField(QQ, implementation='kash'); _.<t> = K[] # optional - kash
sage: F.<y> = K.extension(t^3 - x^2*(x^2 + x + 1)^2) # optional - kash
sage: Oinf = F.maximal_order_infinite()           # optional - kash
sage: I = Oinf.ideal(x,y); I                      # optional - kash
Ideal (y) of Maximal infinite order of Function field
in y defined by y^3 - x^6 - 2*x^5 - 3*x^4 - 2*x^3 - x^2

I don't see how x is in this ideal, but klee's code (it's the default; just remove implementation)
confirms that it is, if we use GF(31).  GF(251) just hangs!  GF(2^16-15) overflows Singular.



Another test case (why doesn't p just print as '(y)'):

sage: K.<x>=FunctionField(GF(2)); _.<Y>=K[]
sage: L.<y>=K.extension(Y^3+x+x^3*Y)
sage: p = L.places_finite()[0]
sage: p
Place (x, y)
sage: latex(p)
\left(y\right)
sage: p
Place (x, y)
sage: O = L.maximal_order()
sage: O.ideal(y)
Ideal (y) of Maximal order of Function field in y defined by y^3 + x^3*y + x
sage: x in O.ideal(y)
True


TODO on SAGE FUNCTION FIELD CODE

- specify uniformizing variables to completion()
- compute series expansions of differentials
- what do FunctionField methods constant_field() and exact_constant_field() really do,
  because they don't compute the "algebraic closure", and implement for QQ/QQbar
- integrate with QQ[x]
- integrate with ProjectiveSpace


FACEBOOK AI EXAMPLE

root = -16*x^8 + 112*x^7 - 204*x^6 + 28*x^5 - x^4 + 1
num = 16*x^3 - 42*x^2 + 2*x
integrate(num/sqrt(root), x)


TRYING TO GET SAGE TO PRODUCE 04-RATIONALS-EXAMPLE1c:

(not sure if I want raytracing to produce these graphics, but a clear
advantage of using HTML5 over PDF is the ability to include
interactive graphics that can be rotated by the reader)

var('u,v')
Surface_parameters = {
    'mesh':          True,
    'opacity':       0.2,
    'plot_points':   [10, 10]
}

A = parametric_plot3d((u, v, atan2(v,u)), (u,0,5), (v,0,5), **Surface_parameters)
B = parametric_plot3d((5+u, v, atan2(v,5+u)), (u,0,5), (v,0,5), **Surface_parameters)
C = parametric_plot3d((-u, v, atan2(v,-u)), (u,0,5), (v,0,5), **Surface_parameters)
D = parametric_plot3d((-5-u, v, atan2(v,-5-u)), (u,0,5), (v,0,5), **Surface_parameters)
E = parametric_plot3d((u, -v, atan2(-v,u)), (u,0,5), (v,0,5), **Surface_parameters)
F = parametric_plot3d((u+5, -v, atan2(-v,u+5)), (u,0,5), (v,0,5), **Surface_parameters)
   # note v starts at 0.1, not 0
G = parametric_plot3d((-u, -v, atan2(-v,-u)), (u,0,5), (v,0.1,5), **Surface_parameters)
   # note v starts at 0.1, not 0
H = parametric_plot3d((-u-5, -v, atan2(-v,-u-5)), (u,0,5), (v,0.1,5), **Surface_parameters)
Surface = (A+B+C+D+E+F+G+H)

func = (lambda u: u^3-3*u, lambda u: u^2-2, lambda u: atan2(u^2-2, u^3-3*u))
Func1 = parametric_plot3d(func, (-2.5,sqrt(2)-0.1), color='red', thickness=5)   # stop short of sqrt(2)
Func2 = parametric_plot3d(func, (sqrt(2),2.5), color='red', thickness=5)
Func = Func1+Func2

# from sage.plot.plot3d.shapes import Cylinder
# Grid1 = Cylinder(0.01, 20,color='black').translate((0,0,-10)).rotateX(pi/2)
# Grid2 = Cylinder(0.01, 20,color='black').translate((0,0,-10)).rotateY(pi/2)
# Grid = Grid1.translate((10,0,0)) + Grid1.translate((-10,0,0)) + Grid2.translate((0,10,0)) + Grid2.translate((0,-10,0))

from sage.plot.plot3d.shapes2 import *
#Rulerx = ruler((-10,-10,0), (10,-10,0), absolute=True)
#Rulery = ruler((10,-10,0), (10,10,0), absolute=True)
#Rulerxy = line3d([(-10,-10,0), (-10,10,0), (10,10,0)])
#Ruler = Rulerx+Rulery+Rulerxy

Rulerx = ruler((-5,-10,0), (5,-10,0), ticks=2, sub_ticks=0, absolute=True, color='black')
Rulery = ruler((10,-5,0), (10,5,0), ticks=2, sub_ticks=0, absolute=True, color='black')
#Rulerxy = line3d([(10,-10,0), (-10,-10,0), (-10,10,0), (10,10,0), (10,-10,0)], color='black')
Rulerxy = line3d([(-5,-10,0), (-10,-10,0), (-10,10,0), (10,10,0), (10,-10,0), (5,-10,0)], color='black')
Ruler = Rulerx+Rulery+Rulerxy

Axisx = line3d([(-10,0,0), (10,0,0)], color='black')
Axisy = line3d([(0,-10,0), (0,10,0)], color='black')
Axes = Axisx+Axisy

jmol_options = {
    'viewer'             : 'jmol',
    'frame_aspect_ratio' : [1,1,.1],
    'frame'              : None,
    'zoom'               : 1.5,
    'orientation'        : (-957, -245, -156, 50),
    'center'             : (-2, 0, 0)
}

(Surface+Func+Ruler+Axes).show(**jmol_options)



Why can't Sage solve this system?

sage: solve([x^2==R^2, (x-2*R)^2 == R^2], x)
[[x == R]]
sage: solve([x^2+y^2==R^2, (x-2*R)^2 +y^2== R^2], x)
[]

sage: var('x,y,R,r1,r2,D,d')
(x, y, R, r1, r2, D, d)
sage: eq1 = (x-D)^2+(y-d/2-R)^2==R^2
sage: eq2 = (x/r1)^2 + (y/r2)^2 ==1
sage: eq3 = (x-D)/(y-d/2-R) == (x/y)*(r2/r1)^2
sage: solve([eq1, eq2, eq3, r1==1.1, r2==.7, d==.15, D==2], R)
[]
sage: solve([eq1, eq2, eq3, r1==1.1, r2==.7, d==.15, D==2], [R,x,y])
[]
sage: solve([eq1, eq2, eq3], [R,x,y])
# runs forever
sage: solve([eq1, eq2, eq3], [R,x,y], algorithm='sympy')
[]
sage: solve([eq1, eq2, eq3], [R], algorithm='sympy')
[]
sage: solve([eq1, eq2, eq3, r1==1.1, r2==.7, d==.15, D==2], [R,x,y], algorithm='sympy')
[]
sage: solve([eq1, eq2, eq3, r1==QQ(1.1), r2==QQ(.7), d==QQ(.15), D==2], [R,x,y], algorithm='sympy')
[]
sage: solve([eq1, eq2, eq3, r1==QQ(1.1), r2==QQ(.7), d==QQ(.15), D==2], [R,x,y])
[]

# This doesn't work because Singular can't handle QQbar
sage: AR.<r1,r2,D,d> = QQbar[]
sage: AF = Frac(AR)
sage: B.<x,y,R> = AF[]
sage: I = ideal(list(map(B, [eq1, eq2, eq3*product(map(denominator, eq3.operands()))])))

# this works!
sage: AR.<r1,r2,D,d> = QQ[]
sage: AF = Frac(AR)
sage: B.<R,x,y> = PolynomialRing(AF, order='lex')
sage: I = ideal(list(map(B, [eq1, eq2, eq3*product(map(denominator, eq3.operands()))])))
sage: Rans = I.groebner_basis()[0]
sage: yans = I.groebner_basis()[2]
sage: Rans.map_coefficients(lambda c: c.subs({r1:1.1, r2:.7, d:.15, D:2}))
sage: C.<y> = QQbar[]
sage: yeq = eval(preparse(repr(yans.map_coefficients(lambda c: c.subs({r1:1.1, r2:.7, d:.15, D:2})))))
sage: yeq.roots()
sage: Rans.map_coefficients(lambda c: c.subs({r1:1.1, r2:.7, d:.15, D:2})).subs({B.2: yeq.roots()[1][0]})


# this works better!
sage: AR.<r1,r2,D,d> = QQ[]
sage: AF = Frac(AR)
sage: B.<x,y,R> = PolynomialRing(AF, order='lex')
sage: I = ideal(list(map(B, [eq1, eq2, eq3*product(map(denominator, eq3.operands()))])))
sage: Rans = I.groebner_basis()[2]
sage: C.<R> = QQbar[]
sage: Req = eval(preparse(repr(Rans.map_coefficients(lambda c: c.subs({r1:1.1, r2:.7, d:.15, D:2})))))
sage: [r for r in Req.roots(multiplicities=False) if r>0]


# better still!
sage: var('x,y,R,r1,r2,D,d')
sage: eq1 = (x-D)^2+(y-d/2-R)^2==R^2
sage: eq2 = (x/r1)^2 + (y/r2)^2 ==1
sage: eq3 = (x-D)/(y-d/2-R) == (x/y)*(r2/r1)^2
sage: B.<x,y,R> = QQbar[]
sage: vals = {r1:QQ(1.1), r2:QQ(.7), d:QQ(.15), D:2}
sage: eqs = [B((eq.lhs() - eq.rhs()).numerator().subs(vals)) for eq in [eq1, eq2, eq3]]
sage: I = ideal(eqs)
sage: [solution for solution in I.variety() if solution[R] > 0]
